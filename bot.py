import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn
import asyncio
from fastapi import FastAPI, Request
from aiogram import types as aio_types
from fastapi.responses import JSONResponse
import json

from aiogram import types
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from dotenv import load_dotenv
import urllib.parse


logging.basicConfig(level=logging.INFO)

# === Load env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-render-url.onrender.com/webhook

# === Google Sheets ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
import json
CREDENTIALS = Credentials.from_service_account_info(
    json.loads(os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON")), scopes=SCOPES
)

sheet_service = build("sheets", "v4", credentials=CREDENTIALS)
sheet = sheet_service.spreadsheets()

# === Telegram ===
bot = Bot(token=BOT_TOKEN)
Bot.set_current(bot)  # ‚úÖ –î–û–î–ê–ô –¶–ï–ô –†–Ø–î–û–ö
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = FastAPI()

CHANNELS = {
    "kino": "@KinoTochkaUA",
    "films": "@KinoTochkaFilms"
}

@app.get("/")
async def root():
    return {"status": "Giveaway bot is running!"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = aio_types.Update(**data)
        await dp.process_update(update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})
def get_user_row(user_id, channel):
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range="Giveaway!A2:E").execute()
    values = result.get("values", [])
    for i, row in enumerate(values, start=2):
        if len(row) >= 3 and row[0] == str(user_id) and row[2] == channel:
            return i, row
    return None, None

async def update_user_data(user_id, username, channel, new_ref_id):
    row_num, existing = get_user_row(user_id, channel)
    if existing:
        invited_ids = existing[3].split(",") if existing[3] else []
        if new_ref_id != str(user_id) and new_ref_id not in invited_ids:
            invited_ids.append(new_ref_id)
            count = len(invited_ids)

            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ + –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"Giveaway!D{row_num}:E{row_num}",
                valueInputOption="RAW",
                body={"values": [[",".join(invited_ids), count]]}
            ).execute()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª–æ–Ω–∫—É "Notified"
            notify_check = sheet.values().get(
                spreadsheetId=SPREADSHEET_ID,
                range=f"Giveaway!F{row_num}"
            ).execute().get("values", [])

            already_notified = notify_check and notify_check[0][0].lower() == "—Ç–∞–∫"

            # –Ø–∫—â–æ –≤–∂–µ 3+ –¥—Ä—É–∑—ñ–≤ —ñ —â–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–∏
            if count >= 3 and not already_notified:
                try:
                    await bot.send_message(user_id, "üéâ –í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ 3 –¥—Ä—É–∑—ñ–≤ ‚Äî –≤–∏ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!")
                except:
                    logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}")

                # –°—Ç–∞–≤–∏–º–æ "—Ç–∞–∫" —É –∫–æ–ª–æ–Ω–∫—É F
                sheet.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"Giveaway!F{row_num}",
                    valueInputOption="RAW",
                    body={"values": [["—Ç–∞–∫"]]}
                ).execute()
    else:
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        values = [[str(user_id), username or "", channel, new_ref_id, 1, "–Ω—ñ"]]
        sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="Giveaway!A:F",
            valueInputOption="RAW",
            body={"values": values}
        ).execute()


async def check_subscription(user_id: int, channel: str):
    try:
        chat_member = await bot.get_chat_member(channel, user_id)
        return chat_member.status in ["member", "creator", "administrator"]
    except:
        return False

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    logging.info(f"‚ñ∂Ô∏è /start –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ {message.from_user.id} ({message.from_user.username})")
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.get_args()
    referral_info = args if args else None

    if referral_info and "_" in referral_info:
        prefix, ref_id = referral_info.split("_", 1)
        channel_key = prefix if prefix in CHANNELS else None

        if channel_key:
            channel_username = CHANNELS[channel_key]

            if await check_subscription(user_id, channel_username):
                # –¢—ñ–ª—å–∫–∏ –¢–ï–ü–ï–† –¥–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—é
                await update_user_data(ref_id, "", channel_key, str(user_id))
                ref_link = f"https://t.me/{channel_username}?start={channel_key}_{user_id}"
        
                share_text = (
                    f"üéû –¢—É—Ç –∫—ñ–Ω–æ, —Å–µ—Ä—ñ–∞–ª–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ü—Ä–µ–º—ñ—É–º –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏!\n"
                    f"@UAKinoTochka_bot ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ {channel_username} —ñ –±–µ—Ä–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium üèÜ"
                )
                encoded_text = share_text  # –±–µ–∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è!
                share_link = f"https://t.me/share/url?url={ref_link}&text={encoded_text}"
                    
                    
                kb = InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=share_link)
                )
                await message.answer(
                    "‚úÖ –í–∞—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –¥–æ —É—á–∞—Å—Ç—ñ!\n\n"
                    "–¢–µ–ø–µ—Ä –∑–∞–ø—Ä–æ—Å—ñ—Ç—å **–º—ñ–Ω—ñ–º—É–º 3 –¥—Ä—É–∑—ñ–≤**, —è–∫—ñ —Ç–µ–∂ –ø—ñ–¥–ø–∏—à—É—Ç—å—Å—è ‚Äî —ñ –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å–Ω–∏–∫–æ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É.",
                    reply_markup=kb
                )
            else:
                await message.answer(
                    f"üîî –ü–µ—Ä—à –Ω—ñ–∂ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username} —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏. "
                    f"–¢—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —Ç–∏ –±—É–¥–µ—à –≤—Ä–∞—Ö–æ–≤–∞–Ω–∏–π —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!"
                )
            return  # ‚úÖ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —Å—é–¥–∏, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø—ñ—Å–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–π—à–æ–≤ –Ω–∞–ø—Ä—è–º—É
    text = (
        "üéâ –í—ñ—Ç–∞—é —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium!\n\n"
        "–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —ñ –∑–∞–ø—Ä–æ—Å–∏ **–º—ñ–Ω—ñ–º—É–º 3 –¥—Ä—É–∑—ñ–≤**.\n"
        "‚ö†Ô∏è –©–æ–π–Ω–æ –≤—Å—ñ –≤–æ–Ω–∏ —Ç–µ–∂ –ø—ñ–¥–ø–∏—à—É—Ç—å—Å—è ‚Äî —Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏—à —É —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤!\n\n"
        "–û–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, ch in CHANNELS.items():
        ref_link = f"https://t.me/{ch.lstrip('@')}"  # ‚úÖ —Ç–µ–ø–µ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—Ä—è–º–æ –Ω–∞ –∫–∞–Ω–∞–ª
        share_link = (
            f"https://t.me/share/url?url={ref_link}"
            f"&text=üéû –¢—É—Ç –∫—ñ–Ω–æ, —Å–µ—Ä—ñ–∞–ª–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ü—Ä–µ–º—ñ—É–º –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏!\n"
            f"@UAKinoTochka_bot ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ {ch} —ñ –±–µ—Ä–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium üèÜ"
        )
        keyboard.add(InlineKeyboardButton(text=f"–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å —á–µ—Ä–µ–∑ {ch}", url=share_link))
        
    await message.answer(text, reply_markup=keyboard)



WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 8000))

async def on_startup(dp):
    logging.info("üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ Webhook...")
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL + WEBHOOK_PATH}")

async def on_shutdown(dp):
    logging.info("‚ùå –í–∏–¥–∞–ª—è—î–º–æ webhook...")
    await bot.delete_webhook()

async def set_webhook_manually():
    webhook_url = WEBHOOK_URL + WEBHOOK_PATH
    success = await bot.set_webhook(webhook_url)
    if success:
        logging.info(f"‚úÖ Webhook manually set: {webhook_url}")
    else:
        logging.error("‚ùå Failed to set webhook manually")


if __name__ == "__main__":
    import uvicorn
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_webhook_manually())  # ‚¨ÖÔ∏è –î–æ–¥–∞–Ω–æ —Ü–µ–π –≤–∏–∫–ª–∏–∫
   
    uvicorn.run("bot:app", host=WEBAPP_HOST, port=WEBAPP_PORT)
