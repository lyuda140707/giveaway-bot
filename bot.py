import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import uvicorn
import asyncio
from fastapi import FastAPI, Request
from aiogram import types as aio_types
from fastapi.responses import JSONResponse
import json
from contextlib import asynccontextmanager

from aiogram import types
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from dotenv import load_dotenv
import urllib.parse


logging.basicConfig(level=logging.INFO)

# === Load env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://your-render-url.onrender.com/webhook

# === Google Sheets ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
import json
CREDENTIALS = Credentials.from_service_account_info(
    json.loads(os.getenv("GOOGLE_SHEETS_CREDENTIALS_JSON")), scopes=SCOPES
)

sheet_service = build("sheets", "v4", credentials=CREDENTIALS)
sheet = sheet_service.spreadsheets()

# === Telegram ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@asynccontextmanager
async def lifespan(app: FastAPI):
    await set_webhook_manually()
    yield

app = FastAPI(lifespan=lifespan)

CHANNELS = {
    "kino": "@KinoTochkaUA",
    "films": "@KinoTochkaFilms"
}

@app.get("/")
async def root():
    return {"status": "Giveaway bot is running!"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = aio_types.Update(**data)
        await dp.process_update(update)
        return JSONResponse(content={"ok": True})
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return JSONResponse(status_code=500, content={"error": str(e)})
def get_user_row(user_id, channel):
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range="Giveaway!A2:E").execute()
    values = result.get("values", [])
    for i, row in enumerate(values, start=2):
        if len(row) >= 3 and row[0] == str(user_id) and row[2] == channel:
            return i, row
    return None, None

async def update_user_data(user_id, username, channel, ref_id):
    # 1. –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞
    user_row_num, user_row = get_user_row(user_id, channel)
    if not user_row:
        logging.info(f"üì• –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —É –∫–∞–Ω–∞–ª {channel}")
        values = [[str(user_id), username or "", channel, "", 0, "–Ω—ñ"]]
        sheet.values().append(
            spreadsheetId=SPREADSHEET_ID,
            range="Giveaway!A:F",
            valueInputOption="RAW",
            body={"values": values}
        ).execute()

    # 2. –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≥–æ, —Ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤
    ref_row_num, ref_row = get_user_row(ref_id, channel)
    if ref_row:
        invited_ids = ref_row[3].split(",") if len(ref_row) >= 4 and ref_row[3] else []

        if str(user_id) != str(ref_id) and str(user_id) not in invited_ids:
            invited_ids.append(str(user_id))
            count = len(invited_ids)

            # –û–Ω–æ–≤–ª—é—î–º–æ invited_ids —ñ count
            sheet.values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f"Giveaway!D{ref_row_num}:E{ref_row_num}",
                valueInputOption="RAW",
                body={"values": [[",".join(invited_ids), count]]}
            ).execute()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–ª–∏
            notify_check = sheet.values().get(
                spreadsheetId=SPREADSHEET_ID,
                range=f"Giveaway!F{ref_row_num}"
            ).execute().get("values", [])
            already_notified = notify_check and notify_check[0][0].lower() == "—Ç–∞–∫"

            # üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞
            try:
                await bot.send_message(
                    int(ref_id),
                    f"üéØ –•—Ç–æ—Å—å –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –ø–æ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é!\nüî¢ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {count} –∑ 3"
                )
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {ref_id}: {e}")

            # üéâ –Ø–∫—â–æ 3 –∞–±–æ –±—ñ–ª—å—à–µ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ
            if count >= 3 and not already_notified:
                try:
                    await bot.send_message(
                        int(ref_id),
                        "üéâ –í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ 3 –¥—Ä—É–∑—ñ–≤ ‚Äî –≤–∏ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!"
                    )
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {ref_id}: {e}")

                sheet.values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f"Giveaway!F{ref_row_num}",
                    valueInputOption="RAW",
                    body={"values": [["—Ç–∞–∫"]]}
                ).execute()



async def check_subscription(user_id: int, channel: str):
    try:
        chat_member = await bot.get_chat_member(channel, user_id)
        logging.info(f"üëÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏: {user_id} —É {channel} ‚Äî —Å—Ç–∞—Ç—É—Å: {chat_member.status}")
        return chat_member.status in ("member", "administrator", "creator")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ {user_id} —É {channel}: {e}")
        return False


    
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    logging.info(f"‚ñ∂Ô∏è /start –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ {message.from_user.id} ({message.from_user.username})")
    user_id = message.from_user.id
    username = message.from_user.username
    args = message.get_args()
    referral_info = args if args else None

    if referral_info and "_" in referral_info:
        prefix, ref_id = referral_info.split("_", 1)
        channel_key = prefix if prefix in CHANNELS else None

        if channel_key:
            channel_username = CHANNELS[channel_key]

            # ‚úÖ –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏
            ref_link = f"https://t.me/{channel_username.lstrip('@')}?start={channel_key}_{user_id}"
            share_text = (
                f"üéû –¢—É—Ç –∫—ñ–Ω–æ, —Å–µ—Ä—ñ–∞–ª–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ü—Ä–µ–º—ñ—É–º –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏!\n"
                f"@UAKinoTochka_bot ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ {channel_username} —ñ –±–µ—Ä–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium üèÜ"
            )
            share_link = f"https://t.me/share/url?url={ref_link}&text={share_text}"

            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=share_link)
            ).add(
                InlineKeyboardButton("‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data=f"check_{channel_key}_{ref_id}")
            )

            await message.answer(
                f"üîî –ü–µ—Ä—à –Ω—ñ–∂ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username} —ñ –ø–æ–≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∏.\n"
                f"–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
                reply_markup=kb
            )
            return  # üõë –ó—É–ø–∏–Ω—è—î–º–æ, –±–æ –≤–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –∫–Ω–æ–ø–∫–∏

    # üîª –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–π—à–æ–≤ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
    text = (
        "üéâ –í—ñ—Ç–∞—é —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium!\n\n"
        "–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —ñ –∑–∞–ø—Ä–æ—Å–∏ **–º—ñ–Ω—ñ–º—É–º 3 –¥—Ä—É–∑—ñ–≤**.\n"
        "‚ö†Ô∏è –©–æ–π–Ω–æ –≤—Å—ñ –≤–æ–Ω–∏ —Ç–µ–∂ –ø—ñ–¥–ø–∏—à—É—Ç—å—Å—è ‚Äî —Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ—Ç—Ä–∞–ø–∏—à —É —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤!\n\n"
        "–û–±–µ—Ä–∏ –∫–∞–Ω–∞–ª –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, ch in CHANNELS.items():
        ref_link = f"https://t.me/GiveawayKinoBot?start={key}_{user_id}"
        share_text = (
            f"üéû –¢—É—Ç –∫—ñ–Ω–æ, —Å–µ—Ä—ñ–∞–ª–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ü—Ä–µ–º—ñ—É–º –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏!\n"
            f"@GiveawayKinoBot ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ {ch} —ñ –±–µ—Ä–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium üèÜ"
        )
        encoded_text = urllib.parse.quote(share_text)
        share_link = f"https://t.me/share/url?url={urllib.parse.quote(ref_link)}&text={encoded_text}"
        keyboard.add(InlineKeyboardButton(text=f"–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å —á–µ—Ä–µ–∑ {ch}", url=share_link))

    await message.answer(text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("check_"))
async def process_check_subscription(callback_query: types.CallbackQuery):
    await callback_query.answer()
    _, channel_key, ref_id = callback_query.data.split("_", 2)
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    channel_username = CHANNELS[channel_key]

    # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è
    user_row_num, _ = get_user_row(user_id, channel_key)
    if user_row_num:
        await callback_query.message.answer("‚úÖ –í–∏ –≤–∂–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!")
        return

    if await check_subscription(user_id, channel_username):
        await update_user_data(user_id, username, channel_key, str(ref_id))

        ref_link = f"https://t.me/{channel_username.lstrip('@')}?start={channel_key}_{user_id}"
        share_text = (
            f"üéû –¢—É—Ç –∫—ñ–Ω–æ, —Å–µ—Ä—ñ–∞–ª–∏ —ñ –Ω–∞–≤—ñ—Ç—å –ü—Ä–µ–º—ñ—É–º –º–æ–∂–Ω–∞ –≤–∏–≥—Ä–∞—Ç–∏!\n"
            f"@UAKinoTochka_bot ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ {channel_username} —ñ –±–µ—Ä–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ Telegram Premium üèÜ"
        )
        share_link = f"https://t.me/share/url?url={ref_link}&text={share_text}"

        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=share_link)
        )
        await callback_query.message.answer(
            "‚úÖ –í–∞—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –¥–æ —É—á–∞—Å—Ç—ñ!\n\n"
            "–¢–µ–ø–µ—Ä –∑–∞–ø—Ä–æ—Å—ñ—Ç—å **–º—ñ–Ω—ñ–º—É–º 3 –¥—Ä—É–∑—ñ–≤**, —è–∫—ñ —Ç–µ–∂ –ø—ñ–¥–ø–∏—à—É—Ç—å—Å—è ‚Äî —ñ –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å–Ω–∏–∫–æ–º —Ä–æ–∑—ñ–≥—Ä–∞—à—É.",
            reply_markup=kb
        )
    else:
        logging.info(f"‚ùå {user_id} —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è –Ω–∞ {channel_username}")
        await callback_query.answer("‚ùó –í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)





WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 8000))

async def on_startup(dp):
    logging.info("üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ Webhook...")
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL + WEBHOOK_PATH}")

async def on_shutdown(dp):
    logging.info("‚ùå –í–∏–¥–∞–ª—è—î–º–æ webhook...")
    await bot.delete_webhook()

async def set_webhook_manually():
    webhook_url = WEBHOOK_URL + WEBHOOK_PATH
    success = await bot.set_webhook(webhook_url)
    if success:
        logging.info(f"‚úÖ Webhook manually set: {webhook_url}")
    else:
        logging.error("‚ùå Failed to set webhook manually")



